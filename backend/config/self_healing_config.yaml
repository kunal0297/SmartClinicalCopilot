# Self-healing system configuration

# Monitoring settings
monitoring:
  system_metrics_interval: 60  # seconds
  service_health_interval: 30  # seconds
  error_rate_interval: 60  # seconds
  cleanup_interval: 3600  # seconds
  retention_days: 7
  history_size: 1000

# Recovery settings
recovery:
  max_retries: 3
  initial_retry_delay: 1  # seconds
  max_retry_delay: 30  # seconds
  exponential_backoff: true
  jitter: true

# Service health checks
service_health:
  api:
    health_endpoint: "/health"
    timeout: 5  # seconds
    retry_count: 3
    critical: true
  worker:
    health_endpoint: "/worker/health"
    timeout: 5
    retry_count: 3
    critical: true
  cache:
    health_endpoint: "/cache/health"
    timeout: 3
    retry_count: 2
    critical: false
  database:
    health_endpoint: "/db/health"
    timeout: 5
    retry_count: 3
    critical: true
  queue:
    health_endpoint: "/queue/health"
    timeout: 3
    retry_count: 2
    critical: false

# Resource thresholds
resource_thresholds:
  cpu:
    warning: 70  # percentage
    critical: 90
    action: "cleanup_memory"
  memory:
    warning: 80
    critical: 95
    action: "cleanup_memory"
  disk:
    warning: 80
    critical: 90
    action: "cleanup_disk"
  network:
    warning: 80
    critical: 90
    action: "throttle_requests"

# Logging settings
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "logs/self_healing.log"
  max_size: 10485760  # 10MB
  backup_count: 5
  console: true

# Alerting settings
alerting:
  email:
    enabled: true
    smtp_host: "smtp.gmail.com"
    smtp_port: 587
    smtp_user: "alerts@example.com"
    smtp_password: "your_password"
    recipients:
      - "admin@example.com"
      - "ops@example.com"
  slack:
    enabled: true
    webhook_url: "https://hooks.slack.com/services/your/webhook/url"
    channel: "#alerts"
  pagerduty:
    enabled: true
    api_key: "your_api_key"
    service_key: "your_service_key"

# Metrics storage
metrics:
  redis:
    host: "localhost"
    port: 6379
    db: 0
    prefix: "self_healing:"
  prometheus:
    enabled: true
    port: 9090
    path: "/metrics"

# Security settings
security:
  ip_whitelist:
    enabled: true
    ips:
      - "127.0.0.1"
      - "10.0.0.0/8"
  rate_limiting:
    enabled: true
    requests_per_minute: 60
  authentication:
    enabled: true
    required: true

# Recovery strategies
recovery_strategies:
  service_restart:
    enabled: true
    max_attempts: 3
    cooldown: 300  # seconds
  db_reconnect:
    enabled: true
    max_attempts: 3
    timeout: 10  # seconds
  memory_cleanup:
    enabled: true
    threshold: 80  # percentage
    interval: 300  # seconds
  config_reload:
    enabled: true
    backup: true
    validate: true
  retry_with_backoff:
    enabled: true
    max_retries: 3
    initial_delay: 1  # seconds
    max_delay: 30  # seconds
  validate_and_retry:
    enabled: true
    max_attempts: 3
    timeout: 5  # seconds
  check_permissions:
    enabled: true
    recursive: true
    fix: true
  block_and_alert:
    enabled: true
    block_duration: 3600  # seconds
    notify: true

# Circuit breaker settings
circuit_breaker:
  enabled: true
  failure_threshold: 5
  reset_timeout: 60  # seconds
  half_open_timeout: 30  # seconds
  min_calls: 10

# Fallback strategies
fallback_strategies:
  degrade_service:
    enabled: true
    basic_features:
      - "health_check"
      - "error_reporting"
  use_read_replica:
    enabled: true
    timeout: 5  # seconds
  use_cached_data:
    enabled: true
    max_age: 300  # seconds
  use_default_config:
    enabled: true
    backup: true
  degrade_features:
    enabled: true
    non_essential:
      - "analytics"
      - "logging"
  use_backup_service:
    enabled: true
    timeout: 5  # seconds
  queue_request:
    enabled: true
    max_retries: 3
  use_alternative_auth:
    enabled: true
    methods:
      - "basic"
      - "token"

# Load balancer settings
load_balancer:
  enabled: true
  strategy: "round_robin"  # round_robin, random, least_loaded
  health_check_interval: 30  # seconds
  service_types:
    - "api"
    - "worker"
    - "cache"
    - "database"
    - "queue"

# Cache settings
cache:
  enabled: true
  type: "redis"
  host: "localhost"
  port: 6379
  db: 0
  default_ttl: 3600  # seconds
  max_size: 1000
  cleanup_interval: 300  # seconds

# Add LLM and IRIS configurations
llm_settings:
  local_model:
    enabled: true
    model_name: "mistral"
    quantization: "8bit"
    max_batch_size: 32
    cache_dir: "./models"
    fallback_models:
      - "llama2"
      - "mistral"
    metrics:
      enabled: true
      collection_interval: 60

iris_database:
  connection_pool:
    min_size: 5
    max_size: 20
    timeout: 30
  cache:
    enabled: true
    ttl: 3600
  monitoring:
    enabled: true
    metrics_interval: 30